/*******************************************************************************
Author: S.P. Kishore
Email: skishore@cs.cmu.edu
Date:  19 Jan 2005

Description:
This is the readme for using NN programs, JustTrain_v2.cpp and JustTest_v1.cpp
These programs use the NN class written in nn_v4.cpp
*******************************************************************************/

/***** Additions *****/
JustTrain_v4.cpp:
	Have included a flag which can be given as an argument after momentum i.e, use 1 after momentum, to read the weight file for initialisation. This is used for adaptation purposes. 
	However, this argument is optional. If not provided, runs with random initialisation.
The use of weight file for adaptation, updates the weight file. Hence, please make sure that you have a backup of the original weight file.

TRAINING

1. JustTrain_v2.cpp is the main program
   it uses neural network class present in "nn_v4.cpp"

   To Compile 

   c++ -o JustTrain_v2 JustTrain_v2.cpp

Usage: 
$JustTrain_v2 <nn_param file> <inputFile> <outputFile> <wtFile> <no_epochs> <validation flag [1/0] <momentum factor>

<nn_param file> Example contents: 
______________________________
2
1
2
27 N 2 N
0.01
______________________________
The description of the above format in nn_param file is as follows:

2 - No of layers 
	(It starts from 0, excluding the input layer)
0 - Input Layer
1 - Output layer 
	(The layer number from which you want to take the output, ideally it is 
          outermost later, i.e "1" in our case)
	(However, This program allows you to take output from hidden layers too).
2 - Nodes in input layer 
	(This should match with the dimension of your feature in the input file)
27 N 2 N 
	(27 indicates that there are 27 nodes in the hidden layer which is numbered as "0"
	(N  indicates tangent [hyperbolic] activation being in 27 nodes)
	(2 indiates that there are 2 nodes in the output layer numbered as "1")
	(N  indicates tangent [hyperbolic] activation being in 2 nodes)

	(You can also use S [Sigmoid] activation or 
	                  L [linear] activation)
	(N tangent output: [-1 1])
	(S sigmoid output: [0 1])
	(L Linear  output: [-inf inf])
0.01    
	(this is the learning rate)


<input file> example contents:

_________________________
4 2
980 200
324 456
765 890
446 230
_________________________

4 2 indicates no of rows and no of columns present in the input file
    please note that number of columns here represent the dimension of 
    your feature vector and it should match with the number of nodes in the
    input layer in <nn_param file>
    The successive lines are the feature vectors 


<output file> example contents

_____________________________
4 2
-1 1
1 -1
1 -1
-1 1
______________________________

    The format is same as <input file>, but here the no of columns 
    should match with the no of nodes in the output later of <nn_param> file

<wtFile> 

A file name, where the trained weights can be stored by the program JustTrain_v2

<validation flag [1/0]>

If you set to 1, it will take 1/4 of your training data for validation purpose, and 
the training is stopped based on validation error

<momentum factor>

You can specify the momentum factor to accelarate the training. Typically this would be in the range
[0 1] and typical values are 0.3 or 0.7.


This program also generates a file called "Err" where the training error is stored for every iteration.


TESTING 
_______

1. JustTest_v1.cpp is the main program. It uses nn_v4.cpp

Compile: c++ -o JustTest_v1 JustTest_v1.cpp

Usage: 

$JustTest_v1 <nn_param file> <test_inFile> <test_outFile> <wtFile>
<nn_param file>

same file that is used in training

<test_inFile>

Its format is same as the <input file> used in the training. This file 
should contain an header indicating number of rows and no of columns.

<test_outFile>

This file is used by the program to write the output of the NN. 

<wtFile> 

This file is the weight file generated by the Training program. 
Do not edit it manually or use wtFiles generated by different training programs.
The weight file format is specific to "JustTrain_v2". 

[Input Layer]

Use of this argument is optional. While testing if you want to give the input at the hidden layer then give the index og the hidden layer (counting from 1st hidden layer as 0) as an extra argument at the end. If this argument is not given then default Input layer will be considered.

example-1 (default input layer): 
		./JustTest_v3 nn_param test-input test-output weightfile

example-2 (input at 2nd hidden layer): 
		./JustTest_v3 nn_param test-input test-output weightfile 1
