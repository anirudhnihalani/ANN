
########## Pre-requisite software #############

ARMADILLO :

armadillo is a c++ linear algebra library.
Download and install armadillo from http://arma.sourceforge.net/download.html to be able to compile and run the ANN code. Installation instructions can be found in the readme of armadillo package.

############ ANN MODULES #####################

Dnn_v*.cpp is the implementation of neural network class.
DnnTrain_v*.cpp is the  program which creates and trains the DNN class.
DnnTest.cpp can be used to generate the output for a test data using the weights saved by training.
utils.cpp contains some simple functions like ReadData etc., used by above modules.

Note: * in Dnn_v* and DnnTrain_v* is the version number.

######### COMPILING AND EXECUTING ##############

step1:compile the program as follows:

g++ -O2 -larmadillo -o DnnTrain_v* DnnTrain_v*.cpp

step2:execute the program as follows:

./DnnTrain_v* <parameters file> <input file> <output file> <weights file> <#Epochs> <momentum>

Ex: ./DnnTrain_v* params train.lpcc train.frm weights.txt 60 0.3

parameters file:

This has all the parameters required to intialize the DNN class. Its structure is as follows
<units in input layer> <units in first layer> <units in second hidden layer> ... <units in output layer>
<output function type of first hidden layer> ... <output function type of output layer>
<batchsize> [<batches per epoch> optional]
<learning rate>

An example params file:
15 100 100 3
N N L
100
0.01

input file:

File containing input data

output file:

File containing output data

weights file:

File where weights of trained network are saved

#Epochs:

Number of epochs

momentum:

momentum factor generally 0.3 or 0.7


################## TESTING/GENRATING OUTPUT FOR TEST DATA ####################

Step1: Compile DnnTest.cpp as follows:

g++ -o DnnTest -O2 -larmadillo DnnTest.cpp

Step2: Generating output:

./DnnTest <NN params file> <input file> <output file> <weights file> [optional <taskType[regression/classification]>]

Argument 1:
<NN params file>
Neural network parameters file. Its contents must match the parameters file used for training.

Argument 2:
<input file>
File containing the test data for which output needs to be genrated

Argument 3:
<output file>
outputs are saved to this file.

Argument 4:
<weight file>
File containing weights saved by training.

Argument 5:
<task type>
This is an optional argument whcih defaults to "regression".If the task type is specified as "classification" the outputs are generated as class labels starting from 1 to N for N classes. If not specified the outputs of units in last layer are stored.
